service: login
frameworkVersion: "=1.16.1"

provider:
  name: aws
  runtime: python2.7
  region: us-east-1

package:
  individually: True
  exclude:
    - node_modules/**
    - env/**
    - static/**

functions:
  authFunc:
    handler: auth/wrap.handler
    events:
      - http:
          path: auth
          method: get
          integration: lambda
          cors: true
          request:
            parameters:
              headers:
                X-rft-gs-authorization: true
    role: authLambdaExecutionRole
    package:
      include:
        - auth/**

  authEvalFunc:
    handler: authEval/wrap.handler
    events:
      - http:
          path: authEval
          method: get
          integration: lambda
          cors: true
          request:
            parameters:
              headers:
                X-rft-gs-authorization: true
    role: authEvalLambdaExecutionRole
    package:
      include:
        - authEval/**
    environment:
      policyBucket: ${self:custom.policyBucket}
      policyPath: ${self:custom.policyPath}
      policyFile: authEvalPolicy.json

  loginFunc:
    handler: login/wrap.handler
    events:
      - http:
          path: login
          method: post
          integration: lambda
          cors: true
          response:
            statusCodes:
              302:
                pattern: ''
                headers:
                  location: integration.response.body.location
                  Set-Cookie: integration.response.body.cookie

    vpc:
      securityGroupIds:
        - sg-c6397eb8
      subnetIds:
        - subnet-7b02c421
        - subnet-50e2bf6c
    role: loginLambdaExecutionRole
    package:
      include:
        - login/**
    environment:
      hostname: ${file(login/ldap.yml):${opt:stage}.hostname}
      protocol: ${file(login/ldap.yml):${opt:stage}.protocol}
      port: ${file(login/ldap.yml):${opt:stage}.port}
      binddn: ${file(login/ldap.yml):${opt:stage}.binddn}
      loginurl: login.${self:custom.domain}

resources:
  Resources:
    authLambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: authLambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: loginLambdaLogPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'

    authEvalLambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: authEvalLambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: loginLambdaLogPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource:
                    - 'Fn::Join':
                      - '/'
                      -
                        - 'arn:aws:s3:::${self:custom.policyBucket}'
                        - ${self:custom.policyPath}
                        - '*'

    loginLambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: loginLambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: loginLambdaLogPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DetachNetworkInterface
                    - ec2:DeleteNetworkInterface
                  Resource: '*'

custom:
  pyIndividually:
    wrap:authFunc: auth/handler.auth
    wrap:authEvalFunc: authEval/handler.auth
    wrap:loginFunc: login/handler.login
    dockerizedPip: True
  domain: rft.geointservices.io
  policyBucket: rft-website-production
  policyPath: policies

plugins:
  - serverless-python-individually